var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"api/#Public","page":"API","title":"Public","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [LinAlgTools]\nOrder   = [:module, :constant, :type, :function, :macro]\nPublic  = true\nPrivate = false","category":"page"},{"location":"api/#LinAlgTools.ref!-Tuple{Any}","page":"API","title":"LinAlgTools.ref!","text":"ref!(A; show_steps=false)\n\nPut A in row echelon form.\n\nReturns the (row, column) indices of the pivots.\n\nExample\n\njulia> A = Float64[mod(i+j,3) for i in 1:4, j in 1:6]\n4×6 Array{Float64,2}:\n 2.0  0.0  1.0  2.0  0.0  1.0\n 0.0  1.0  2.0  0.0  1.0  2.0\n 1.0  2.0  0.0  1.0  2.0  0.0\n 2.0  0.0  1.0  2.0  0.0  1.0\n\njulia> ref!(A)\n3-element Array{Tuple{Int64,Int64},1}:\n (1, 1)\n (2, 2)\n (3, 3)\n\njulia> A\n4×6 Array{Float64,2}:\n 2.0  0.0   1.0  2.0  0.0   1.0\n 0.0  1.0   2.0  0.0  1.0   2.0\n 0.0  0.0  -4.5  0.0  0.0  -4.5\n 0.0  0.0   0.0  0.0  0.0   0.0\n\n\n\n\n\n","category":"method"},{"location":"api/#LinAlgTools.ref-Tuple{Any}","page":"API","title":"LinAlgTools.ref","text":"ref(A; show_steps=false)\n\nCompute a row echelon form of A.\n\nReturns the (row, column) indices of the pivots.\n\nExample\n\njulia> A = Float64[mod(i+j,3) for i in 1:4, j in 1:6]\n4×6 Array{Float64,2}:\n 2.0  0.0  1.0  2.0  0.0  1.0\n 0.0  1.0  2.0  0.0  1.0  2.0\n 1.0  2.0  0.0  1.0  2.0  0.0\n 2.0  0.0  1.0  2.0  0.0  1.0\n\njulia> ref(A)\n4×6 Array{Float64,2}:\n 2.0  0.0   1.0  2.0  0.0   1.0\n 0.0  1.0   2.0  0.0  1.0   2.0\n 0.0  0.0  -4.5  0.0  0.0  -4.5\n 0.0  0.0   0.0  0.0  0.0   0.0\n\n\n\n\n\n","category":"method"},{"location":"api/#LinAlgTools.row_add!-Tuple{Any,Pair,Any}","page":"API","title":"LinAlgTools.row_add!","text":"row_add!(A, i=>j, λ)\n\nAdd row i multiplied by λ to row j of matrix A.\n\nReturns a copy of the new row j.\n\nExample\n\njulia> A = [i//j for i in 1:3, j in 1:4]\n3×4 Array{Rational{Int64},2}:\n 1//1  1//2  1//3  1//4\n 2//1  1//1  2//3  1//2\n 3//1  3//2  1//1  3//4\n\njulia> row_add!(A, 1=>3, -3)\n4-element Array{Rational{Int64},1}:\n 0//1\n 0//1\n 0//1\n 0//1\n\njulia> A\n3×4 Array{Rational{Int64},2}:\n 1//1  1//2  1//3  1//4\n 2//1  1//1  2//3  1//2\n 0//1  0//1  0//1  0//1\n\n\n\n\n\n","category":"method"},{"location":"api/#LinAlgTools.row_add-Tuple{Any,Pair,Any}","page":"API","title":"LinAlgTools.row_add","text":"row_add(A, i=>j, λ)\n\nCreate a matrix equal to A but with λ times row i added to row j.\n\nExample\n\njulia> A = [i//j for i in 1:3, j in 1:4]\n3×4 Array{Rational{Int64},2}:\n 1//1  1//2  1//3  1//4\n 2//1  1//1  2//3  1//2\n 3//1  3//2  1//1  3//4\n\njulia> row_add(A, 1=>3, -3)\n3×4 Array{Rational{Int64},2}:\n 1//1  1//2  1//3  1//4\n 2//1  1//1  2//3  1//2\n 0//1  0//1  0//1  0//1\n\n\n\n\n\n","category":"method"},{"location":"api/#LinAlgTools.row_mul!-Tuple{Any,Any}","page":"API","title":"LinAlgTools.row_mul!","text":"row_mul!(A, i, by=λ)\n\nMultiply row i of matrix A by a factor λ.\n\nReturns a copy of the new row i.\n\nExample\n\njulia> A = reshape(1:12, 3, 4) |> collect\n3×4 Array{Int64,2}:\n 1  4  7  10\n 2  5  8  11\n 3  6  9  12\n\njulia> row_mul!(A, 2, by=100)\n4-element Array{Int64,1}:\n  200\n  500\n  800\n 1100\n\njulia> A\n3×4 Array{Int64,2}:\n   1    4    7    10\n 200  500  800  1100\n   3    6    9    12\n\n\n\n\n\n","category":"method"},{"location":"api/#LinAlgTools.row_mul-Tuple{Any,Any}","page":"API","title":"LinAlgTools.row_mul","text":"row_mul(A, i, by=λ)\n\nCreate a matrix equal to A but with row i multiplied by λ.\n\nExample\n\njulia> A = reshape(1:12, 3, 4) |> collect\n3×4 Array{Int64,2}:\n 1  4  7  10\n 2  5  8  11\n 3  6  9  12\n\njulia> row_mul(A, 2, by=100)\n3×4 Array{Int64,2}:\n   1    4    7    10\n 200  500  800  1100\n   3    6    9    12\n\n\n\n\n\n","category":"method"},{"location":"api/#LinAlgTools.row_swap!-Tuple{Any,Any,Any}","page":"API","title":"LinAlgTools.row_swap!","text":"row_swap!(A, i, j)\n\nSwap rows i and j in matrix A.\n\nReturns a copy of the two rows in the new order.\n\nExample\n\njulia> A = reshape(1:12, 3, 4) |> collect\n3×4 Array{Int64,2}:\n 1  4  7  10\n 2  5  8  11\n 3  6  9  12\n\njulia> row_swap!(A, 1, 3)\n2×4 Array{Int64,2}:\n 3  6  9  12\n 1  4  7  10\n\njulia> A\n3×4 Array{Int64,2}:\n 3  6  9  12\n 2  5  8  11\n 1  4  7  10\n\n\n\n\n\n","category":"method"},{"location":"api/#LinAlgTools.row_swap-Tuple{Any,Any,Any}","page":"API","title":"LinAlgTools.row_swap","text":"row_swap(A, i, j)\n\nCreate a matrix equal to A but with rows i and j swapped.\n\nExample\n\njulia> A = reshape(1:12, 3, 4) |> collect\n3×4 Array{Int64,2}:\n 1  4  7  10\n 2  5  8  11\n 3  6  9  12\n\njulia> row_swap(A, 1, 3)\n3×4 Array{Int64,2}:\n 3  6  9  12\n 2  5  8  11\n 1  4  7  10\n\n\n\n\n\n","category":"method"},{"location":"api/#LinAlgTools.rref!-Tuple{Any}","page":"API","title":"LinAlgTools.rref!","text":"rref!(A; show_steps)\n\nPut A in the reduced row echelon form.\n\nReturns the (row, column) indices of the pivots.\n\nExample\n\njulia> A = Float64[mod(i+j,3) for i in 1:4, j in 1:6]\n4×6 Array{Float64,2}:\n 2.0  0.0  1.0  2.0  0.0  1.0\n 0.0  1.0  2.0  0.0  1.0  2.0\n 1.0  2.0  0.0  1.0  2.0  0.0\n 2.0  0.0  1.0  2.0  0.0  1.0\n\njulia> rref!(A)\n3-element Array{Tuple{Int64,Int64},1}:\n (1, 1)\n (2, 2)\n (3, 3)\n\njulia> A\n4×6 Array{Float64,2}:\n  1.0   0.0  0.0   1.0   0.0  0.0\n  0.0   1.0  0.0   0.0   1.0  0.0\n -0.0  -0.0  1.0  -0.0  -0.0  1.0\n  0.0   0.0  0.0   0.0   0.0  0.0\n\n\n\n\n\n","category":"method"},{"location":"api/#LinAlgTools.rref-Tuple{Any}","page":"API","title":"LinAlgTools.rref","text":"rref(A; show_steps)\n\nCompute the reduced row echelon form of A.\n\nExample\n\njulia> A = Float64[mod(i+j,3) for i in 1:4, j in 1:6]\n4×6 Array{Float64,2}:\n 2.0  0.0  1.0  2.0  0.0  1.0\n 0.0  1.0  2.0  0.0  1.0  2.0\n 1.0  2.0  0.0  1.0  2.0  0.0\n 2.0  0.0  1.0  2.0  0.0  1.0\n\njulia> rref(A)\n4×6 Array{Float64,2}:\n  1.0   0.0  0.0   1.0   0.0  0.0\n  0.0   1.0  0.0   0.0   1.0  0.0\n -0.0  -0.0  1.0  -0.0  -0.0  1.0\n  0.0   0.0  0.0   0.0   0.0  0.0\n\n\n\n\n\n","category":"method"},{"location":"api/#Private","page":"API","title":"Private","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [LinAlgTools]\nOrder   = [:module, :constant, :type, :function, :macro]\nPublic  = false\nPrivate = true","category":"page"},{"location":"api/#LinAlgTools.log-Tuple{Any,Any}","page":"API","title":"LinAlgTools.log","text":"log(A, txt)\n\nWrite matrix A with title text txt to standard output.\n\n\n\n\n\n","category":"method"},{"location":"api/#LinAlgTools.ref_pass!-Tuple{Any}","page":"API","title":"LinAlgTools.ref_pass!","text":"ref_pass!(A)\n\nPerform one pass of the row-echelon-form algorithm.\n\nReturns the column index of the pivot for this pass, or nothing if A is all zeros.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = LinAlgTools","category":"page"},{"location":"#LinAlgTools","page":"Home","title":"LinAlgTools","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tools for playing with linear algebra. For now just a textbook implementation of Gaussian elimination.","category":"page"},{"location":"#Gaussian-Elimination","page":"Home","title":"Gaussian Elimination","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The algorithm rarely works with matrices of integer type since they generally cannot store the results of the multiplications by non-integers. However rational arrays work well:","category":"page"},{"location":"","page":"Home","title":"Home","text":"A = Rational[ 4  2   0  -5   0   5\n              4  3  -5  -2  -2   3\n              2  2   2  -3   2   5\n              5  4   3  -3  -2  -2 ]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Calls such as ref and rref return a modified copy of the matrix, and the optional show_steps argument can be used to see each pass of the algorithm:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using LinAlgTools\n\nB = ref(A, show_steps=true)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Calls such as ref! and rref! modify the given matrix and return a list of pivots, each as a (row, column) tuple:","category":"page"},{"location":"","page":"Home","title":"Home","text":"rref!(B)\nB","category":"page"},{"location":"","page":"Home","title":"Home","text":"Elementary row operations are available as row_swap, row_mul, row_add, which return the modified matrix:","category":"page"},{"location":"","page":"Home","title":"Home","text":"row_swap(B, 1, 2)\nrow_mul(B, 1, by=10)\nrow_add(B, 1=>2, -1)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The in-place variants row_swap!, row_mul!, row_add! return copies of the modified rows (a potentially useful side-effect of keeping the implementation as simple as possible).","category":"page"},{"location":"","page":"Home","title":"Home","text":"row_swap!(B, 1, 2)\nB","category":"page"}]
}
